---
globs: src/app/app/onboarding/*.tsx,src/lib/server-actions.ts
---
# Onboarding Flow Guidelines

These rules capture the established patterns in the onboarding UI and related server actions. Reference implementations: [src/app/app/onboarding/OnboardingForm.tsx](mdc:src/app/app/onboarding/OnboardingForm.tsx), [src/app/app/onboarding/page.tsx](mdc:src/app/app/onboarding/page.tsx), and [src/lib/server-actions.ts](mdc:src/lib/server-actions.ts).

## Architecture & Data Flow âœ… ENHANCED
- Validate Slack user via query params `?user={slackId}&team={teamId}` at mount. If missing/invalid or onboarding completed, redirect to `/app/help` immediately.
- Use server actions directly (imports), not fetch calls:
  - `validateSlackUser(slackId, teamId)` for initial validation **with subscription data**
  - `getWorkspaceChannels(teamId)` to list channels (filters handled client-side)
  - `completeSlackOnboarding(slackId, userWorkspaceId, analysisFrequency, selectedChannels?, invitationEmails?, userEmail?)` to persist and finish
- **Enhanced User Validation**: `validateSlackUser` now returns subscription data for PRO user detection
- **Subscription-Aware Interface**: SlackUser interface includes optional subscription field
- **Email Collection**: Mandatory email collection during onboarding, saved to database with proper validation
- Workspace-specific tokens only. Server-side looks up `workspace.botToken` by Slack team ID and never uses a global token.
- When joining channels, use `joinBotToChannels()` - database persistence handled automatically via Slack events.

## Event-Driven Channel Management âœ… NEW ARCHITECTURE
- **No Direct Database Operations**: Onboarding only joins channels, never writes to `botChannelsCollection`
- **Automatic Sync**: `member_joined_channel` events update database when bot joins during onboarding
- **Manual Addition Support**: Users can add bot to new channels after onboarding - events handle database sync
- **Single Source of Truth**: Slack events drive ALL channel membership changes
- **Channel Access**: Commands work in any channel where bot is present (onboarding or manual addition)

## Steps & State âœ… UPDATED WITH EMAIL STEP
- **Dynamic Step Flow**: `frequency` â†’ `channels` â†’ `email` â†’ `payment` (conditional)
- **PRO User Logic**: Skip payment step if `user.subscription.tier === 'PRO'` and `status === 'active'`
- **Step Flow Patterns**:
  - **FREE Users**: `frequency` â†’ `channels` â†’ `email` â†’ `payment` â†’ complete
  - **PRO Users**: `frequency` â†’ `channels` â†’ `email` â†’ complete (skip payment)
- **Button Labels**: "Complete Setup" for PRO users in email step, "Next" for FREE users
- **PRO Visual Indicator**: Show congratulations card in channels step for existing PRO subscribers
- **Email Step**: Mandatory email collection with basic validation and reassuring copy
- Channel selection stores compact items with `{ id, name }`. Only allow non-archived channels.
- Initiate step change to `channels` immediately upon Next click, while channels load in the background. Disable appropriate buttons during fetch.

## UI & Components
- Always import UI from `@/components/ui` (never from vendor libraries directly). Examples used: `Container`, `Stack`, `Row`, `Center`, `Card`, `Title`, `Text`, `Button`, `Skeleton`, `Checkbox`, `SegmentedControl`, `TextInput`.
- Use a fixed-height scroll container for the channel list:
  - Row height: 44px constant
  - Visible rows: 5 (container height = rows * rowHeight + 24 padding)
  - Ellipsize long labels; prefix private channels with `ðŸ”’` and public with `#`.
- **Email Input**: Use `TextInput` without label (step title already shows "Email address"), include reassuring copy about no spam
- Display lightweight loading states:
  - Page validating state shows centered text
  - Channel list shows skeleton rows equal to visible rows
- Show errors inline below the step body using a subdued, accessible style.
- Maintain a clean panel layout with a header (title + optional subtitle), body, and footer with Back/Primary actions.

## Navigation & Suspense
- Wrap the onboarding form in a `Suspense` boundary in the route page with a meaningful fallback. See [page.tsx](mdc:src/app/app/onboarding/page.tsx).
- Use `useTransition` for submit/finish flows to keep the UI responsive and to drive button `loading` states.

## Animation & Accessibility
- Use GSAP for step transitions with slide + blur microinteractions.
  - Detect `prefers-reduced-motion` and shorten/simplify to respect user preference.
  - Disable pointer events on the stage during transitions to avoid accidental interactions.
  - Manage outgoing/incoming panels via refs; never conditionally call hooks.
- Keep hook order stable; render helper functions (e.g., `renderPanel`) should be pure and not define hooks.

## Error Handling & Redirects
- On validation failures or completed onboarding, redirect to `/app/help`.
- For transient channel errors, surface a single concise inline error and allow retry.
- Log server action errors to aid debugging but do not block UX on non-critical failures (e.g., partial channel-join failures are tolerated).

## Data Contracts
- `validateSlackUser` returns a minimal user object containing `_id`, `slackId`, `workspaceId`, `name`, `analysisFrequency`, `hasCompletedOnboarding`, and optional `subscription`.
- `getWorkspaceChannels(teamId)` returns `{ success, channels, error? }` where `channels` is an array of Slack channel metadata filtered client-side.
- `completeSlackOnboarding` accepts optional `selectedChannels`, `invitationEmails`, and mandatory `userEmail` and handles joining server-side (persistence via Slack events).

## Content & Copy
- Keep copy short, friendly, and specific to each step:
  - Frequency title: "Report frequency" with subtitle "How often should we DM your report?"
  - Channels title: "Channels" with subtitle "Choose channels to enable AI coaching"
  - Email title: "Email address" with subtitle "Where should we send your reports?"
- **Email Reassurance**: Include copy "Don't worry, we won't spam you. We'll use this to send your communication reports and important product updates."
- Use proper JSX entity escaping for special characters.

## Email Validation & Handling
- **Mandatory Field**: Email is required during onboarding, cannot be skipped
- **Basic Validation**: Use regex `/^[^\s@]+@[^\s@]+\.[^\s@]+$/` for client-side validation
- **Database Storage**: Email saved as nullable field in SlackUser schema, defaults to `null` for new users
- **OAuth Behavior**: Set `email: null` instead of placeholder during user creation/reinstallation
- **Server Action**: `completeSlackOnboarding` accepts `userEmail` parameter and saves trimmed email to database